async function main() {
      // Imports the Google Cloud client library
    const speech = require('@google-cloud/speech');

    // Creates a client
    const client = new speech.SpeechClient();

    /**
     * TODO(developer): Uncomment the following lines before running the sample.
     */
    // const gcsUri = 'gs://my-bucket/audio.raw';
    // const encoding = 'Encoding of the audio file, e.g. LINEAR16';
    // const sampleRateHertz = 16000;
    // const languageCode = 'BCP-47 language code, e.g. en-US';

    const config = {
    enableWordTimeOffsets: true,
    encoding: 'FLAC',
    sampleRateHertz: 16000,
    languageCode: 'ko-KR',
    };
// 수업시연 (online-audio-converter.com)
    const fname = '수업시연 (online-audio-converter.com)'
    const audio = {
    uri: 'gs://nathan-app/'+fname+'.flac',
    };

    const request = {
    config: config,
    audio: audio,
    };
    console.time();
    // Detects speech in the audio file. This creates a recognition job that you
    // can wait for now, or get its result later.
    const [operation] = await client.longRunningRecognize(request);
    // Get a Promise representation of the final result of the job
    const [response] = await operation.promise();

    ///// 타임스탬프 넣기!
    const fss = require('fs');
    const content = JSON.stringify(response);
    fss.writeFileSync(fname+'json', content);

    response.results.forEach(result => {
        console.log(`Transcription: ${result.alternatives[0].transcript}`);
        result.alternatives[0].words.forEach(wordInfo => {
          // NOTE: If you have a time offset exceeding 2^32 seconds, use the
          // wordInfo.{x}Time.seconds.high to calculate seconds.
          const startSecs =
            `${wordInfo.startTime.seconds}` +
            '.' +
            wordInfo.startTime.nanos / 100000000;
          const endSecs =
            `${wordInfo.endTime.seconds}` +
            '.' +
            wordInfo.endTime.nanos / 100000000;
          console.log(`Word: ${wordInfo.word}`);
          console.log(`\t ${startSecs} secs - ${endSecs} secs`);
        });
    });


    ///// 원래있던거 (단순 결과 프린트)
    const transcription = response.results
    .map(result => result.alternatives[0].transcript)
    .join('\n');
    console.log(`Transcription: ${transcription}`);

    ///// text 화하기
    const fs = require('fs');
    const text = transcription;
    fs.writeFileSync(fname+".txt", '\ufeff' + text, {encoding: 'utf8'});
    console.timeEnd();

  }
  
  main().catch(console.error);
  // [END speech_quickstart]


